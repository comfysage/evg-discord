@mixin stylebutton($bg: $sky, $fg: $crust, $hover_bg: false, $hover_fg: false) {
  &[class*="lookFilled_"] {
    color: $fg;
    background-color: $bg;
    &:hover {
      @if $hover_bg {
        background-color: $hover_bg;
      } @else {
        background-color: darken($bg, 5%);
      }
    }
  }
  &[class*="lookOutlined_"] {
    color: $bg;
    border-color: $bg;
    &:hover {
      color: $fg;
      background-color: $bg;
      border-color: $bg;
    }
  }
  &[class*="lookLink_"] {
    color: $bg;
    &:hover [class*="contents_"] {
      --button--underline-color: currentColor;
    }
  }
}

[class*="lookFilled_"] {
  &[class*="colorPrimary_"],
  &[class*="colorBrand_"],
  &[class*="colorBrandNew_"],
  &[class*="colorBrandInverted_"],
  &[class*="colorLink_"],
  &[class*="colorYellow_"],
  &[class*="colorRed_"],
  &[class*="colorGreen_"] {
    // darken the nitro button too
    svg[class^="premiumIcon"] {
      color: darken($pink, 20%) !important;
    }

    // spinner color
    [class*="spinnerItem_"] {
      background-color: $crust;
    }

    [class*="defaultColor_"] {
      color: $crust;
    }
  }
}

// For some reason, red buttons on click turn blue. Sure.
button[class*="lookFilled_"][class*="colorRed_"]:active {
  background-color: $red;
}

// buttons in sidebar when in calls
div[class^="actionButtons"] {
  [class^="button"][class*="buttonColor_"],
  [class^="button"] [class*="buttonColor_"] {
    background-color: $surface1;
    color: $crust;

    &[class*="buttonActive_"] {
      background-color: $green;
      color: $crust;

      [class*="buttonContents_"] {
        color: $crust;

        svg {
          color: $crust;
        }
      }
    }
  }
}

// lookInverted buttons should have darker brand text
[class*="lookInverted_"][class*="colorBrand_"] {
  color: var(--brand-experiment-600);

  // darken the nitro button too
  svg[class^="premiumIcon"] {
    color: darken($pink, 15%) !important;
  }
}

// lookLink + colorPrimary should be themed
.theme-dark,
.theme-light {
  [class*="colorBrand_"] {
    @include stylebutton(var(--brand-500), $crust, var(--brand-experiment-600));
  }
  [class*="colorLink_"] {
    @include stylebutton($pink);
  }
  [class*="colorRed_"] {
    @include stylebutton($red);
  }
  [class*="colorGreen_"] {
    @include stylebutton($green);
  }
  [class*="colorWhite_"] {
    @include stylebutton($text);
  }
  [class*="colorPrimary_"] {
    @include stylebutton($sky);
  }
  [class*="colorTransparent_"] {
    @include stylebutton($surface0, $text);
  }
}

// dangerous button when hovered is colored properly
div[class*="button_"][class*="dangerous_"]:hover {
  color: darken($red, 10%);
}

// make all selected radio buttons's text crust
div[role="radio"][class*="selected"] {
  color: $crust;

  // make the allow radio button's bg to the correct green
  &[class*="allow"] {
    background-color: $green;
  }
}
//nonspecific radio buttons
[class*="container_"][style*="background_color: var(__green_360)"] {
  --green-360: #{$green}; //vencord plugin settings
  background-color: $green !important;
}
[class*="container_"][style*="background_color: var(__primary_400)"],
[class*="container_"][style*="background_color: rgb(130, 133, 143)"] {
  background-color: $crust !important; //used in a lot of places
}
// vencord spotify plugin button theming support (uses vencord-specific classes)
.vc-spotify-button-row .vc-spotify-button {
  &.vc-spotify-shuffle-on,
  &.vc-spotify-repeat-context,
  &.vc-spotify-repeat-track {
    color: var(--interactive-normal);
  }
  &.vc-spotify-repeat-off,
  &.vc-spotify-shuffle-off {
    color: var(--text-muted);
  }
}

// these badges appear in the emoji/sticker picker
[class*="topGuildEmojiBadge_"] {
  background: linear-gradient(268.26deg, $peach, $red 102.45%);

  * {
    color: $crust !important;
  }
}

[class*="newlyAddedBadge_"] {
  background: linear-gradient(268.26deg, $teal, $green 102.45%);

  * {
    color: $crust !important;
  }
}

//revert nitro icon on nitro subscribe button on external emoji
[class*="lookFilled_"]
  [class*="premiumSubscribeButton_"]
  > [class*="premiumIcon_"] {
  color: $crust !important;
}

// Create a server back button
div[class^="layerContainer"] button[class^="backButton"][class*="lookBlank"] {
  color: $text;
}

// Make stream settings selected buttons text legible
.vcd-screen-picker-radio[data-checked=true] > [class^="defaultColor_"] {
  color: $crust;
}

// inverted brand color
[class*="colorBrandInverted_"] {
  color: var(--brand-500);
  background-color: $crust;
  &[class*="lookFilled_"] {
    color: var(--brand-500);
    background-color: $crust;
    &:hover {
      background-color: $mantle;
    }
  }
  &[class*="lookOutlined_"] {
    &:hover {
      background-color: $mantle;
      color: var(--brand-500);
    }
  }
}

// darken close button and matching 'esc' text
[class^="closeButton"],
[class^="closeButton"]:hover {
  color: $overlay0;
  & + [class^="keybind"] {
    color: $overlay0;
  }
}

// on/off switch -- needs important because styles are written on element with js
[class*="container_"][style="background-color: var(--primary-400); opacity: 1;"]:has(
    svg[class*="slider_"]
  ) {
  background-color: $surface0 !important;
}
[class*="container_"] > svg[class*="slider_"] > svg > path {
  fill: $surface0;
}
